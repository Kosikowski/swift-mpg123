name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write
  security-events: write

jobs:
  # macOS and Apple Platforms
  build-macos:
    runs-on: ${{ matrix.runner }}
    name: macOS (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        include:
          - swift-version: 5.9
            runner: macos-14
          - swift-version: 6.1.2
            runner: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'
      - name: Install Swift ${{ matrix.swift-version }}
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Show versions
        run: |
          xcodebuild -version
          swift --version
      - name: Clean build directory
        run: rm -rf .build
      - name: Build and Test
        run: |
          swift build -v
          swift test -v
      - name: Run demo
        run: swift run MP3PlayerDemo

  build-ios:
    runs-on: ${{ matrix.runner }}
    name: iOS (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        include:
          - swift-version: 5.9
            runner: macos-14
            use_xcodebuild: true
          - swift-version: 6.1.2
            runner: macos-latest
            use_xcodebuild: false
    steps:
      - uses: actions/checkout@v4
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'
      - name: Install Swift ${{ matrix.swift-version }}
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Clean build directory
        run: rm -rf .build
      - name: Build and Test
        if: matrix.use_xcodebuild == true
        run: |
          swift build -v
          swift test -v
      - name: Build and Test (SwiftPM)
        if: matrix.use_xcodebuild == false
        run: |
          swift build -v
          swift test -v

  build-tvos:
    runs-on: ${{ matrix.runner }}
    name: tvOS (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        include:
          - swift-version: 5.9
            runner: macos-14
            use_xcodebuild: true
          - swift-version: 6.1.2
            runner: macos-latest
            use_xcodebuild: false
    steps:
      - uses: actions/checkout@v4
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'
      - name: Install Swift ${{ matrix.swift-version }}
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Clean build directory
        run: rm -rf .build
      - name: Build and Test
        if: matrix.use_xcodebuild == true
        run: |
          swift build -v
          swift test -v
      - name: Build and Test (SwiftPM)
        if: matrix.use_xcodebuild == false
        run: |
          swift build -v
          swift test -v

  build-visionos:
    runs-on: ${{ matrix.runner }}
    name: visionOS (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        include:
          - swift-version: 5.9
            runner: macos-14
            use_xcodebuild: true
          - swift-version: 6.1.2
            runner: macos-latest
            use_xcodebuild: false
    steps:
      - uses: actions/checkout@v4
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16'
      - name: Install Swift ${{ matrix.swift-version }}
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Clean build directory
        run: rm -rf .build
      - name: Build and Test
        if: matrix.use_xcodebuild == true
        run: |
          swift build -v
          swift test -v
      - name: Build and Test (SwiftPM)
        if: matrix.use_xcodebuild == false
        run: |
          swift build -v
          swift test -v

  # Linux
  build-linux:
    runs-on: ubuntu-22.04
    name: Linux (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        swift-version: [5.9, 6.1.2]
    steps:
      - uses: actions/checkout@v4
      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Show Swift version
        run: swift --version
      - name: Build and Test
        run: |
          swift build -v
          swift test -v

  build-linux-release:
    runs-on: ubuntu-22.04
    name: Linux Release (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        swift-version: [5.9, 6.1.2]
    steps:
      - uses: actions/checkout@v4
      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Show Swift version
        run: swift --version
      - name: Build and Test Release
        run: |
          swift build -c release -v
          swift test -c release -v

  # Windows
  build-windows:
    runs-on: windows-2022
    name: Windows (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        swift-version: [5.9, 6.1.2]
    steps:
      - uses: actions/checkout@v4
      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Verify Swift installation
        run: |
          swift --version
          swift build --help
        shell: pwsh
      - name: Build and Test
        run: |
          swift build -v
          swift test -v
        shell: pwsh

  build-windows-release:
    runs-on: windows-2022
    name: Windows Release (Swift ${{ matrix.swift-version }})
    strategy:
      matrix:
        swift-version: [5.9, 6.1.2]
    steps:
      - uses: actions/checkout@v4
      - name: Install Swift
        uses: SwiftyLab/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift-version }}
      - name: Verify Swift installation
        run: |
          swift --version
          swift build --help
        shell: pwsh
      - name: Build and Test Release
        run: |
          swift build -c release -v
          swift test -c release -v
        shell: pwsh

  # Code Quality (macOS only)
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install SwiftFormat
      run: |
        brew install swiftformat
        
    - name: Check SwiftFormat
      run: swiftformat --lint --config .swiftformat Sources/ Tests/
      
    - name: Format code with SwiftFormat
      run: swiftformat --config .swiftformat Sources/ Tests/
      
  # Package Validation
  package-validation:
    name: Package Validation
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: SwiftyLab/setup-swift@v1
      with:
        swift-version: '5.9'
        
    - name: Check package description
      run: swift package describe

  # Release job - only runs on tag pushes
  release:
    name: Create Release
    runs-on: macos-14
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-macos, build-ios, build-tvos, build-visionos, build-linux, build-linux-release, build-windows, build-windows-release, code-quality, package-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16'
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## What's Changed
          
          This release includes:
          - MP3 decoding capabilities via embedded mpg123
          - Swift wrapper for mpg123 C library
          - Cross-platform support (macOS, Linux, Windows)
          - Demo CLI application for MP3 playback
          
          ## Installation
          
          ```swift
          .package(url: "https://github.com/your-username/swift-mpg123.git", from: "${{ github.ref_name }}")
          ```
          
          ## Usage
          
          ```swift
          import SwiftMpg123
          
          let decoder = MPG123()
          // ... use the decoder
          ```
        draft: false
        prerelease: false 